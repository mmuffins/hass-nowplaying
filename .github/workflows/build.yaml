name: build

on:
  workflow_dispatch:
  push:
    branches: 
      - main
  pull_request:

env:
  version: "0.0.${{ github.run_number }}${{ github.run_attempt }}"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: write
      
    env:
      build_configuration: Release
      build_runtime: linux-x64
      build_framework: net8.0
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8
      
    - name: dotnet restore
      run: dotnet restore

    - name: dotnet build
      run: dotnet build
      
    - name: dotnet publish
      run: dotnet publish --configuration ${{ env.build_configuration }} --runtime ${{ env.build_runtime }} --framework ${{ env.build_framework }} --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=false -p:PublishReadyToRun=false -p:Version=${{ env.version }} -p:PackageVersion=${{ env.version }} --output publish

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: ${{ github.workspace }}/publish

    - name: Create tarball
      run: |
        cd "${{ github.workspace }}/publish/"
        find . -name "*.pdb" -type f -delete
        mkdir -p tarball/hass-nowplaying
        mv hass-nowplaying tarball/hass-nowplaying
        cp "${{ github.workspace }}/appsettings.json" "${{ github.workspace }}/publish/tarball/hass-nowplaying"
        cp "${{ github.workspace }}/hass-nowplaying.service" "${{ github.workspace }}/publish/tarball/hass-nowplaying"
        cd tarball
        tar -czvf hass-nowplaying.tar.gz *
        rm -r hass-nowplaying

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tarball
        path: ${{ github.workspace }}/publish/tarball

    - name: dotnet test
      run: dotnet test --configuration ${{ env.build_configuration }} --framework ${{ env.build_framework }} --verbosity normal --logger "trx;LogFileName=TestResults.trx"
        
    - name: Publish Unit Test Results
      uses: dorny/test-reporter@v1
      with:
        name: Unit Test Results
        path: Tests/**/TestResults.trx
        reporter: dotnet-trx

  deb:
    runs-on: ubuntu-latest
    needs: build
          
    env:
      package_name: hass-nowplaying

    steps:
    - uses: actions/checkout@v4

    - name: Create folder structure
      run: |
        cd "${{ github.workspace }}/packaging/deb"
        mkdir -p usr/bin
        mkdir -p usr/share/${{ env.package_name }}
        mkdir -p usr/share/doc/${{ env.package_name }}

    - name: Get artifacts
      uses: actions/download-artifact@v4
      with:
        name: build
        path: ${{ github.workspace }}/packaging/deb/usr/bin

    - name: Move additional files
      run: |
        cd "${{ github.workspace }}/packaging/deb"
        find . -name "*.pdb" -type f -delete

        cp "${{ github.workspace }}/${{ env.package_name }}.service" "${{ github.workspace }}/packaging/deb/usr/share/${{ env.package_name }}"
        cp "${{ github.workspace }}/appsettings.json" "${{ github.workspace }}/packaging/deb/usr/share/doc/${{ env.package_name }}"
        cp "${{ github.workspace }}/README.md" "${{ github.workspace }}/packaging/deb/usr/share/doc/${{ env.package_name }}"
        cp "${{ github.workspace }}/LICENSE" "${{ github.workspace }}/packaging/deb/usr/share/doc/${{ env.package_name }}"

    - name: Build deb file
      run: |
        cd "${{ github.workspace }}/packaging/deb"
        dpkg-deb --build ${{ env.package_name }}
        mv ${{ env.package_name }}.deb "${{ github.workspace }}/publish/${{ env.package_name }}_${{ env.version }}.deb"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: deb
        path: ${{ github.workspace }}/publish

    - name: Check deb file
      run: |
        cd "${{ github.workspace }}/publish"
        dpkg -I ${{ env.package_name }}_${{ env.version }}.deb
        sudo dpkg -i ${{ env.package_name }}_${{ env.version }}.deb

  release:
    if: ${{ github.event_name != 'pull_request'  && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    needs: [build, deb]
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Get tarball
      uses: actions/download-artifact@v4
      with:
        name: tarball
        path: ${{ github.workspace }}/publish

    - name: Get deb
      uses: actions/download-artifact@v4
      with:
        name: deb
        path: ${{ github.workspace }}/publish


    # - name: Create release
    #   uses: actions/github-script@v7
    #   id: create-release
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const {data: newRelease} = await github.rest.repos.createRelease({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         name: 'Home Assistant Now Playing Daemon ${{ env.version  }}',
    #         tag_name: '${{ env.version  }}',
    #         generate_release_notes: true,
    #         draft: false,
    #         prerelease: false
    #       });
    #       console.log(`Release has been created with id ${newRelease.id}: ${newRelease.html_url}`)
    #       core.setOutput("url", newRelease.html_url)
    #       core.setOutput("id", newRelease.id)
          
    # - name: Upload Release Assets
    #   uses: actions/github-script@v7
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const fs = require('fs').promises

    #       const attachment = await fs.readFile("./publish/hass-nowplaying.tar.gz")
    #       await github.rest.repos.uploadReleaseAsset({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         release_id: '${{ steps.create-release.outputs.id }}',
    #         data: attachment,
    #         name: 'hass-nowplaying.tar.gz'
    #       });


